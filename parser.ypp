%require "3.8.2"
%language "C++"
%define api.value.type variant
%define api.token.constructor
%define parse.assert
%define parse.trace
%define parse.error verbose

%parse-param { AST::ASTNode** ast_root }
%code requires
{
    #pragma once
    #include <iostream>
    #include <string>
	#include "ast.hpp"

	using namespace std;
    
    // forward decleration (1)
    namespace yy
    {
        class parser;
    }
}
%code
{
    namespace yy
    {
        parser::symbol_type yylex(); // override (2)
        // no need to override the error function because it is already waiting for our implementation (3)
    }
	void dump(AST::ASTNode* n);

    extern yy::parser::symbol_type get_next_token();
}

%token EOF_ 0 "end of file"
%token <string> IDENTIFIER
%token <string> NUMBER
%token <string> STRING
%token <string> BOOL
%token VAR
%token CONST
%token IS
%token NUMBER_TYPE
%token STRING_TYPE
%token BOOL_TYPE
%token NULL_TYPE
%token COMMA
%token SEMICOLON
%token ASSIGN
%token PLUS
%token MINUS
%token MUL
%token DIV
%token LPAREN
%token RPAREN
%token LBRACKET
%token RBRACKET
%token LBRACE
%token RBRACE
%token READ_INT
%token READ_REAL
%token READ_STRING
%token PRINT
%token IF
%token ELSE
%token THEN
%token END
%token LESS
%token LESS_E
%token GREATER
%token GREATER_E
%token EQUAL
%token NOT_EQUAL
%token NOT
%token WHILE_L
%token FOR_L
%token LOOP
%token FUNC
%token RETURN
%token DO
%token DOT_OP
%token INVALID
%token AND
%token OR
%token XOR

// AST Nodes
%type <AST::Block*> block if_alternatives list_assignemtns assignment function_params
%type <AST::ASTNode*> program statement operation operation_op
%type <AST::ASTNode*> if_statement loop_statement function_call for_expression function_declaration
%type <AST::ASTNode*> expression term factor assignment_value assignment_part assignment_type tuple_element
%type <AST::ASTNode*> conditional_expression
%type <AST::ASTNode*> read_keyword
 
%left AND OR
%left NOT
%nonassoc LESS GREATER LESS_E GREATER_E EQUAL
%left MINUS PLUS
%left MUL DIV

%%

program
	: block { *ast_root = $1; }
	;

block
	: statement { $$ = new AST::Block(); $$->append($1); }
	| operation { $$ = new AST::Block(); $$->append($1); }
	| block statement { $1->append($2); $$ = $1; }
	| block operation { $1->append($2); $$ = $1; }
	;

statement
	: assignment { $$ = $1; }
	| if_statement { $$ = $1; }
 	| loop_statement { $$ = $1; }
	| function_call { $$ = $1; }
	;


assignment
	: list_assignemtns SEMICOLON { $$ = $1; }
	| declaration_specifics list_assignemtns SEMICOLON { $$ = $2; }
	| declaration_specifics IDENTIFIER ASSIGN function_declaration { 
		AST::Ident* lhs = new AST::Ident($2);
		$$ = new AST::Block();
		AST::ASTNode* node = new AST::Assign(*lhs, *$4);
		$$->append(node);
	 }
	;

declaration_specifics
	: VAR
	| CONST;

list_assignemtns
	: list_assignemtns COMMA assignment_part { $1->append($3); $$ = $1; }
	| assignment_part { $$ = new AST::Block(); $$->append($1); }
	;

assignment_part
	: IDENTIFIER ASSIGN assignment_value {
		AST::Ident* lhs = new AST::Ident($1);
		AST::ASTNode* rhs = $3;
		$$ = new AST::Assign(*lhs, *rhs);
	 }
	| IDENTIFIER ASSIGN expression {
		AST::Ident* lhs = new AST::Ident($1);
		AST::ASTNode* rhs = $3;
		$$ = new AST::Assign(*lhs, *rhs);
	 }
	| IDENTIFIER {
		AST::Ident* lhs = new AST::Ident($1);
		AST::ASTNode* rhs = new AST::NullConst();
		$$ = new AST::Assign(*lhs, *rhs);
	}
	| IDENTIFIER LBRACKET NUMBER RBRACKET ASSIGN expression {
		AST::Ident* ident = new AST::Ident($1); 
		AST::NumberConst* idx = new AST::NumberConst($3);
		AST::ArrayEl* elem = new AST::ArrayEl(*ident, *idx);
		$$ = new AST::ArrayAssign(*elem, *$6);
	}
	;

assignment_value
	: LBRACKET RBRACKET { 
		AST::Block* empty = new AST::Block();
		$$ = new AST::ArrayDecl(*empty);
	 }
	| LBRACKET function_params RBRACKET { $$ = new AST::ArrayDecl(*$2); }
	;

tuple_element
	: IDENTIFIER DOT_OP IDENTIFIER {
		AST::Ident* ident = new AST::Ident($1); 
		AST::Ident* idx = new AST::Ident($3);
		$$ = new AST::TupleEl(*ident, *idx);
	}
	| IDENTIFIER DOT_OP NUMBER {
		AST::Ident* ident = new AST::Ident($1); 
		AST::NumberConst* idx = new AST::NumberConst($3);
		$$ = new AST::TupleEl(*ident, *idx);
	}
	;

assignment_type
	: NULL_TYPE { $$ = new AST::VarType("null"); }
	| BOOL_TYPE { $$ = new AST::VarType("bool"); }
	| NUMBER_TYPE { $$ = new AST::VarType("number"); }
	| STRING_TYPE { $$ = new AST::VarType("string"); }
	;

expression
	: term { $$ = $1; }
	| expression PLUS term { $$ = new AST::Plus(*$1, *$3); }
	| expression MINUS term { $$ = new AST::Minus(*$1, *$3); }
	| LPAREN expression RPAREN { $$ = $2; }
	;

term
	: factor { $$ = $1; }
	| term MUL factor { $$ = new AST::Times(*$1, *$3); }
	| term DIV factor { $$ = new AST::Div(*$1, *$3); }
	;

factor
	: NUMBER { $$ = new AST::NumberConst($1); }
	| STRING { $$ = new AST::StringConst($1); }
	| BOOL { $$ = new AST::BoolConst($1); }
	| IDENTIFIER { $$ = new AST::Ident($1); }
	| function_call { $$ = $1; }
	| tuple_element { $$ = $1; }
	| LBRACE list_assignemtns RBRACE {
		$$ = new AST::TupleDecl(*$2);
	 }
	| IDENTIFIER LBRACKET NUMBER RBRACKET { 
		AST::Ident* ident = new AST::Ident($1); 
		AST::NumberConst* idx = new AST::NumberConst($3);
		$$ = new AST::ArrayEl(*ident, *idx);
	 }
	| IDENTIFIER IS assignment_type {
		AST::Ident* lhs = new AST::Ident($1);
		$$ = new AST::IsOp(*lhs, *$3);
	 }
	;


operation
	: PRINT expression SEMICOLON { $$ = new AST::Print(*$2); }
	| read_keyword IDENTIFIER SEMICOLON { 
		AST::Ident* ident = new AST::Ident($2); 
		$$ = new AST::Read(*$1, *ident); 
	 }
	| IDENTIFIER operation_op ASSIGN expression SEMICOLON {
		AST::Ident* ident = new AST::Ident($1); 
		$$ = new AST::CompExp(*ident, *$2, *$4); 
	 }
	| tuple_element operation_op ASSIGN expression SEMICOLON {
		$$ = new AST::CompExp(*$1, *$2, *$4); 	
	}
	;

operation_op
	: PLUS { $$ = new AST::OpType("Plus"); }
	| MINUS { $$ = new AST::OpType("Minus"); }
	| MUL { $$ = new AST::OpType("Mul"); }
	| DIV { $$ = new AST::OpType("Div"); }
	;

read_keyword
	: READ_INT { $$ = new AST::VarType("Int"); }
	| READ_REAL { $$ = new AST::VarType("Real"); }
	| READ_STRING { $$ = new AST::VarType("String"); }

if_statement
	: IF conditional_expression THEN block if_alternatives END {
		$$ = new AST::If(*$2, *$4, *$5);
	}
	;

conditional_expression 
	: conditional_expression AND conditional_expression { $$ = new AST::And(*$1, *$3); }
	| conditional_expression OR conditional_expression { $$ = new AST::Or(*$1, *$3); }
	| NOT conditional_expression { $$ = new AST::Not(*$2); }
	| expression LESS expression { $$ = new AST::Less(*$1, *$3); }
	| expression LESS_E expression { $$ = new AST::Less_E(*$1, *$3); }
	| expression GREATER expression { $$ = new AST::Greater(*$1, *$3); }
	| expression GREATER_E expression { $$ = new AST::Greater_E(*$1, *$3); }
	| expression EQUAL expression { $$ = new AST::Equals(*$1, *$3); }
	| expression NOT_EQUAL expression { $$ = new AST::Not_Equals(*$1, *$3); }
	| expression { $$ = new AST::AsBool(*$1); }
	;

if_alternatives
	: %empty { $$ = new AST::Block(); }
	| ELSE block { $$ = $2; }
	;

loop_statement
	: WHILE_L conditional_expression LOOP block END { $$ = new AST::While(*$2, *$4); }
	| FOR_L assignment conditional_expression SEMICOLON for_expression LOOP block END {
		$$ = new AST::For(*$2, *$3, *$5, *$7);
	 }
	;

for_expression
	: IDENTIFIER operation_op ASSIGN expression {
		AST::Ident* ident = new AST::Ident($1);
		$$ = new AST::CompExp(*ident, *$2, *$4);
	}
	;

function_declaration
	: FUNC LPAREN function_params RPAREN DO block RETURN expression SEMICOLON END { 
		AST::AsBool* expr = new AST::AsBool(*$8);
		$$ = new AST::FuncDecl(*$3, *$6, *expr);
	 }

function_call
	: IDENTIFIER LPAREN function_params RPAREN { 
		AST::Ident* ident = new AST::Ident($1);
		$$ = new AST::FuncCall(*ident, *$3);
	 }

function_params
	: function_params COMMA factor { $1->append($3); $$ = $1; }
	| factor { $$ = new AST::Block(); $$->append($1); }
	;

%%

namespace yy
{
    void parser::error(const std::string& msg) //(3+)
    {
        std::cout<< msg << '\n';
    }
}

void dump(AST::ASTNode* n) {
    std::cout << "*** Building: " << n->str() << std::endl;
}